rajaperf:
  name: RAJAPerf
  tags: [programming-model:raja, programming-language:c++, programming-model:cuda, programming-model:hip, programming-model:openmp, programming-model:openmp-target, programming-model:sycl, benchmark-scale:single-node]
  license: BSD-3-Clause
  url: https://github.com/LLNL/RAJAPerf/
  ref: 10.1109/P3HPC49587.2019.00012
  notes: The suite comes with re-implementations of well-known benchmarks/benchmark suites in a variety of programming models
  benchmarks:
    stream:
      name: STREAM
      tags: [memory-access-characteristics:regular-memory-access, programming-model:kokkos]  # inline lists are a little more space-efficient
    polybench:
      name: PolyBench
    lcals:
      name: LCALS
      longname: Livermore Compiler Analysis Loop Suite
      tags: [programming-model:kokkos]
    comm:
      name: Halo Communication
    basic:
      name: Basic Patterns
      tags: [programming-model:kokkos]
    apps:
      name: Application Kernels
      notes: Variety of kernels extracted from real-world applications
    algorithm:
      name: Algorithms
      notes: Algorithm primites (Atomic, Memcopy, Memset, Reduce, Scan, Sort, Sort-Pairs)
hecbench:
  name: HeCBench
  tags: [programming-model:cuda, programming-model:hip, programming-model:sycl, programming-model:openmp-target, benchmark-scale:single-node, programming-language:c++]
  url: https://github.com/zjin-lcf/HeCBench
  ref: 10.1109/ISPASS57527.2023.00041
  license: BSD-3-Clause
  notes: A collection of heterogeneous computing benchmarks, aligned in categories
  benchmarks:
    automotive:
      name: Automotive benchmarks
      tags: [application-domain:automotive]
      notes: "Benchmark: daphne"
    bandwidth:
      name: Bandwidth benchmarks
      tags: [memory-access-characteristics:high-memory-bandwidth, memory-access-characteristics:regular-memory-access] #tbd
      notes: "Benchmarks: cmembench, babelstream, memcpy, memtest, randomAccess, shmembench, triad"
    bioinformatics:
      name: Bioinformatics benchmarks
      tags: [application-domain:biology]
      notes: "Benchmarks: all-pairs-distance, bsw, ccs, cm, deredundancy, diamond, epistasis, extend2, frna, fsm, ga, logan, minibude, minimap2, nbnxm, nw, pcc, prna, sa, snake"
    computer-vision:
      name: Computer vision and image processing
      tags: [application-domain:computer-vision]
      notes: "A set of 49 benchmarks"
    cryptography:
      name: Cryptography
      tags: [application-domain:cryptography]
      notes: "Benchmarks: aes, bitcracker, chacha20, columnarSolver, ecdh, keccaktreehash, merkle, present"
    data-compression:
      name: Data compression and reduction
      tags: [method-type:compression] #tbd
      notes: "A set of 25 benchmarks"
    data-encoding:
      name: Data encoding, decoding, or verification
      notes: "Benchmarks: ans, crc64, crs, entropy, jenkins-hash, ldpc, md5hash, murmurhash3"
    finance:
      name: Finance
      tags: [application-domain:finance]
      notes: "Benchmarks: aop, black-scholes, binomial, bonds, libor"
    geoscience:
      name: Geoscience
      tags: [application-domain:geoscience]
      notes: "Benchmarks: aidw, coordinates, geodesic, hausdorff, haversine, stsg"
    graph:
      name: Graph and tree
      tags: [method-type:graph]
      notes: "Benchmarks: cc, floydwarshall, floydwarshall2, gc, hbc, hungarian, mis, sssp, rsmt"
    language-features:
      name: Language and kernel features
      tags: [programming-language:c++]
      notes: "A set of 40 benchmarks"
    machine-learning:
      name: Machine learning
      tags: [method-type:ai]
      notes: "A set of 69 benchmarks"
    math:
      name: Math
      tags: [method-type:math]
      notes: "A set of 64 benchmarks"
    rng:
      name: Random number generation
      tags: [method-type:rng]
      notes: "Benchmarks: mt, permutate, qrg, rng-wallace, sobol, urng"
    search:
      name: Search
      notes: "Benchmarks: bfs, bsearch, b+tree, grep, keogh, s8n, ss, sss, tsp"
    signals:
      name: Signal processing
      tags: [method-type:fft, method-type:signal-processing]
      notes: "Benchmarks: extrema, fft, lombscargle, sosfil, zmddft"
    simulation:
      name: Simulation
      notes: "A set of 97 benchmarks"
    sorting:
      name: Sorting
      tags: [method-type:sorting]
      notes: "Benchmarks: bitonic-sort, hybridsort, is, merge, quicksort, radixsort, segsort, sort, sortKV, split, warpsort"
    robotics:
      name: Robotics
      tags: [application-domain:robotics]
      notes: "Benchmarks: inversek2j, rodrigues"
rodinia:
  name: Rodinia
  tags: [programming-model:cuda, programming-model:opencl, programming-model:openmp, benchmark-scale:single-node, programming-language:c]
  url: https://www.cs.virginia.edu/rodinia/doku.php?id=start
  ref: 10.1109/IISWC.2009.5306797
  license: free
  notes: "No updates since a long time; customized BSD-3-Clause license"
  benchmarks:
    leukocyte:
      name: Leukocyte
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=leukocyte
      tags: [mesh-representation:structured-grid, application-domain:medical]
    heart:
      name: Heart Wall
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=heart_wall
      tags: [mesh-representation:structured-grid, application-domain:medical]
    mummergpu:
      name: MUMmerGPU
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=mummergpu
      tags: [method-type:graph-traversal, application-domain:bioinformatics]
    cfdsolver:
      name: CFD Solver
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=cfd_solver
      tags: [application-domain:cfd, method-type:finite-volume, mesh-representation:unstructured-grid]
    ludecomp:
      name: LU Decomposition
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=lu_decomposition
      tags: [method-type:dense-linear-algebra]
    hotspot:
      name: HotSpot
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=hotspot
      tags: [method-type:ode, mesh-representation:structured-grid, application-domain:physics]
    backpropagation:
      name: Back Propagation
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=back_propagation
      tags: [method-type:ai, mesh-representation:unstructured-grid]
    needleman:
      name: Needleman-Wunsch
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=needleman-wunsch
      tags: []
    kmeans:
      name: Kmeans
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=kmeans
      tags: []
    bfs:
      name: Breadth-First Search
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=graph_traversal
      tags: []
    srad:
      name: SRAD
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=srad
      tags: []
    streamcluster:
      name: Streamcluster
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=streamcluster
      tags: []
    particlefilter:
      name: Particle Filter
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=particle_filter
      tags: []
    pathfinder:
      name: PathFinder
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=pathfinder
      tags: []
    gaussian:
      name: Gaussian Elimination
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=gaussian_elimination
      tags: []
    knn:
      name: k-Nearest Neighbors
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=k-nearest_neighbors
      tags: []
    lavamd2:
      name: LavaMD2
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=lavamd2
      tags: []
    myocyte:
      name: Myocyte
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=myocyte
      tags: []
    btree:
      name: "B+ Tree"
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=b_tree
      tags: []
    gpudwt:
      name: GPUDWT
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=gpudwt
      tags: []
    hybridsort:
      name: Hybrid Sort
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=hybrid_sort
      tags: []
    htospot3d:
      name: Hotspot3D
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=hotspot3d
      tags: []
    huffman:
      name: Huffman
      url: https://www.cs.virginia.edu/rodinia/doku.php?id=huffman
      tags: []

benchmarks:
  hpl:
    name: HPL
  polybench:
    name: PolyBench
    url: https://web.cs.ucla.edu/~pouchet/software/polybench/
  stream:
    name: STREAM
    license: free #https://www.cs.virginia.edu/stream/FTP/Code/LICENSE.txt
    url: https://www.cs.virginia.edu/stream/
    ref: mcalpin1996 #https://www.cs.virginia.edu/stream/ref.html#citing: Memory Bandwidth and Machine Balance in Current High Performance  Computers
    tags: [programming-language:c, programming-language:fortran, benchmark-scale:single-node, memory-access-characteristics:regular-memory-access]
  babelstream:
    name: BabelStream
    license: free # based on STREAM's license: https://github.com/UoB-HPC/BabelStream?tab=License-1-ov-file#readme
    url: https://github.com/UoB-HPC/BabelStream
    ref: 10.1504/IJCSE.2018.095847
    tags: [programming-language:c++, benchmark-scale:single-node, memory-access-characteristics:regular-memory-access, programming-model:opencl, programming-model:cuda, programming-model:hip, programming-model:openacc, programming-model:openmp, programming-model:pstl, programming-model:kokkos, programming-model:raja, programming-model:sycl, programming-model:tbb, programming-model:thrust, programming-model:futhark]
    notes: "STREAM in many models for many devices; also available: Julia, Rust, Scala, Java"
  lcals:
    name: LCALS
    url: https://codesign.llnl.gov/LCALS.php
  rodiniajl:
    name: Rodinia (Julia)
    license: free
    url: https://github.com/JuliaParallel/rodinia/
    tags: [programming-model:cuda, programming-model:opencl, programming-model:openmp, benchmark-scale:single-node, programming-language:julia]
    notes: "Julia-port of the Rodinia benchmarks, with single and multi-threaded implementations and Julia+CUDA; has the Rodinia license (customized BSD-3-Clause)"
  rodiniadpcpp:
    name: Rodinia (DPC++)
    license: MIT
    url: https://github.com/artecs-group/rodinia-dpct-dpcpp/
    tags: [programming-model:dpc++, programming-model:sycl, programming-language:c++]
    notes: "DPC++-translation of Rodinia benchmarks (SYCL tag added for visibility)"
  rodiniasycl:
    name: Rodinia (SYCL)
    license: BSD-3-Clause
    url: https://github.com/zjin-lcf/Rodinia_SYCL
    tags: [programming-model:sycl, programming-language:c++]
    notes: "SYCL implementations of Rodinia benchmarks, currently deprecated (integrated into/maintained through HeCBench)"
coral2:
  name: CORAL-2
  tags: [programming-model:openmp, programming-model:cuda, programming-language:c++, programming-language:c, programming-language:fortran, programming-language:python]
  license: none
  url: https://asc.llnl.gov/coral-2-benchmarks
  notes: The suite comes with re-implementations of well-known benchmarks/benchmark suites in a variety of programming models
  benchmarks:
    hacc:
      name: HACC
      tags: [application-domain:astrophysics, method-type:nbody, method-type:fft, benchmark-scale:large-scale, communication:mpi, programming-model:openmp, programming-model:cuda, programming-language:c++, compute-performance-characteristics:high-fp]
      notes: >
        The Hardware Accelerated Cosmology Code (HACC) simulates the formation of structure in collisionless fluids under the influence of gravity in an expanding universe. Achieves 13.92 Petaflops, 69.2\% of machine peak on Sequoia.
    nekbone:
      name: NEKBONE  
      tags: [application-domain:cfd, method-type:conjugate-gradient, benchmark-scale:large-scale, communication:mpi, programming-model:cuda, programming-language:fortran, programming-language:c, compute-performance-characteristics:high-fp, communication-performance-characteristics:network-collectives]
      notes: "Nekbone is a mini-app derived from the Nek5000 CFD code which is a high order, incompressible Navier-Stokes CFD solver based on the spectral element method."
    qmcpack:
      name: QMCPACK
      tags: [application-domain:molecular-dynamics, method-type:montecarlo, benchmark-scale:large-scale, communication:mpi, programming-model:openmp, programming-model:cuda, programming-language:c, programming-language:c++, memory-access-characteristics:high-memory-bandwidth]
      notes: "QMCPACK is a many-body ab initio quantum Monte Carlo code for computing the electronic structure of atoms, molecules, and solids."  
    lammps:
      name: LAMMPS
      tags: [application-domain:molecular-dynamics, benchmark-scale:large-scale, communication:mpi, programming-model:openmp, programming-model:cuda, programming-language:c++, compute-performance-characteristics:high-fp,  memory-access-characteristics:high-memory-bandwidth, communication-performance-characteristics:network-bandwidth-bound,communication-performance-characteristics:network-latency-bound]
